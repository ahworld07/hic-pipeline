import glob

## Using absolute path. 
## will leave it for now. Will include in the install script.  
BASE_DIR = workflow.basedir
BIN = BASE_DIR + "/../bin/"
SCP = BASE_DIR + "/../scripts/"
LIB = BASE_DIR + "/../lib/"
#include: BASE_DIR + "/../system.Snakefile"


GENOME = config["GENOME"]
# samples
SAMPLES = config["SAMPLES"].split()
R1 = config["R1_SUFFIX"]
R2 = config["R2_SUFFIX"]
# fastqs
FASTQ_R1 = {} 
FASTQ_R2 = {}
for sample in SAMPLES:
  fastq_r1 = glob.glob("fastq/"+sample+R1+"*")
  FASTQ_R1[sample] = fastq_r1
  fastq_r2 = glob.glob("fastq/"+sample+R2+"*")
  FASTQ_R2[sample] = fastq_r2


N_CPUS = config["N_CPUS"]
BWA_INDEX_PATH = config["BWA_INDEX_PATH"]
#print(N_CPUS)
RES_ENZYME = config["RES_ENZYME"]
## resolution for directionality index and insulation
BIN_SIZE = config["BIN_SIZE"]
BIN_NUM = config["BIN_NUM"]
## reference and annotation path
REF = BWA_INDEX_PATH + "/" + GENOME
#ANNOTATION = BIN + "/../annotation/"
SITE_POS = BIN + "/../annotation/juicebox/site_pos/"+ GENOME + "_" + RES_ENZYME + ".txt"
GENOME_FEATURE = BIN + "/../annotation/genome_features/"+ GENOME + \
    "." + RES_ENZYME + "." + str(BIN_SIZE) + ".gnf"

## read the chromosome information.
CHR = []
with open(REF+".fa.fai") as inf:
    for line in inf:
        CHR.append(line.strip().split('\t')[0])
#print(CHR)


## complete version will output the bam file in addition to the sorted txt files. 
rule all:
    input:
        expand("{sample}/{sample}.raw.sam",sample=SAMPLES),
        expand("{sample}/{sample}.valid_pairs.dedup.sorted.txt",sample=SAMPLES),
        expand("{sample}/{sample}.hic",sample=SAMPLES),
        expand("{sample}/{sample}.norm.DI.bedgraph",sample=SAMPLES),
        expand("{sample}/{sample}.insulation.bedgraph",sample=SAMPLES),
        expand("{sample}/{sample}.norm.DI.TAD",sample=SAMPLES),
        
rule vanilla:
    input: 
        expand("{sample}/{sample}.hic",sample=SAMPLES),
#        expand("{sample}/{sample}.norm.DI.bedgraph",sample=SAMPLES),
        expand("{sample}/matrix/{sample}.{chr}.norm.DI",sample=SAMPLES,chr=CHR),
        expand("{sample}/matrix/{sample}.{chr}.insulation.bed",sample=SAMPLES,chr=CHR),
        expand("{sample}/{sample}.norm.DI.TAD",sample=SAMPLES),
        expand("{sample}/{sample}.norm.DI.bedgraph",sample=SAMPLES),
        expand("{sample}/{sample}.insulation.bedgraph",sample=SAMPLES),


rule bwa_map: 
    output: 
        # do not produce bam file.
#        "{sample}/{sample}.raw.sam",
        "{sample}/{sample}.valid_pairs.txt",
        "{sample}/log/bwa.R1.log",
    input: 
        R1 = lambda wildcards: FASTQ_R1[wildcards.sample],
        R2 = lambda wildcards: FASTQ_R2[wildcards.sample]
    benchmark:
        "benchmarks/{sample}.bwa_map.txt"
    threads: N_CPUS
    shell: 
        "cd {wildcards.sample} && "
        "{SCP}/bwa_map2.sh -1 ../{input.R1}  -2 ../{input.R2} -g {REF} -p {threads} -e {SITE_POS} -n {wildcards.sample}"

rule valid_pairs_dedup:
    output: 
        "{sample}/{sample}.valid_pairs.dedup.sorted.txt"
    input: 
        "{sample}/{sample}.valid_pairs.txt"
    benchmark:
        "benchmarks/{sample}.valid_pairs_dedup.txt"
    threads: N_CPUS
    shell: 
        "{LIB}/sort --parallel={threads} -k3,3 -k7,7 -k4,4n -k8,8n -u {input} > {output}"

rule txt2juicer:
    output:
        "{sample}/{sample}.hic"
    input:
        "{sample}/{sample}.valid_pairs.dedup.sorted.txt"
    benchmark:
        "benchmarks/{sample}.txt2juicer.txt"
    threads: 1
    shell:
        "java -jar {LIB}/juicer_tools.jar pre -q 30 -f {SITE_POS} {input} {output} {GENOME}"

rule juicer2di_insulation:
    output: 
        ascNorm = "{sample}/matrix/{sample}.{chr}.norm.asc",
        di = "{sample}/matrix/{sample}.{chr}.norm.DI",
        ins = "{sample}/matrix/{sample}.{chr}.insulation.bed"
    input: 
        #"{sample}/{sample}.valid_pairs.dedup.sorted.txt"
        "{sample}/{sample}.hic"
    benchmark:
        "benchmarks/{sample}.pairs2mat.txt"
    threads: 1
    shell:
        "{SCP}/script_juicer2di_ins.sh {wildcards.chr} {REF} {BIN_SIZE} {BIN_NUM} "
        "{GENOME_FEATURE} {wildcards.sample}"

rule di2tad: 
    output: 
        "{sample}/{sample}.norm.DI.TAD"
    input:
        expand("{{sample}}/matrix/{{sample}}.{chr}.norm.DI",chr=CHR)
    benchmark:
        "benchmarks/{sample}.di2tad.txt"
    threads: 1
    log:
        "{sample}/log/di2tad.log"
    shell:
        "cat {input} > {wildcards.sample}/{wildcards.sample}.norm.DI; "
        "{LIB}/DI2TAD.sh {wildcards.sample}/{wildcards.sample}.norm.DI {REF} {BIN_SIZE} >& {log}"

rule di_ins_bedgraph:
    output: 
        di = "{sample}/{sample}.norm.DI.bedgraph",
        ins = "{sample}/{sample}.insulation.bedgraph"
    input: 
        di = expand("{{sample}}/matrix/{{sample}}.{chr}.norm.DI",chr=CHR),
        ins = expand("{{sample}}/matrix/{{sample}}.{chr}.insulation.bed",chr=CHR)
    threads: 1
    shell:
        "cat {input.di} |  awk '!/NA|-Inf/' - > {output.di};"
        "cat {input.ins} |  awk '!/NA|-Inf/' - > {output.ins}"

# rule to convert sam to bam
# sort bam
# dedup bam



